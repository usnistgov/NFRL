/*******************************************************************************
License:
This software was developed at the National Institute of Standards and
Technology (NIST) by employees of the Federal Government in the course
of their official duties. Pursuant to title 17 Section 105 of the
United States Code, this software is not subject to copyright protection
and is in the public domain. NIST assumes no responsibility  whatsoever for
its use by other parties, and makes no guarantees, expressed or implied,
about its quality, reliability, or any other characteristic.

This software has been determined to be outside the scope of the EAR
(see Part 734.3 of the EAR for exact details) as it has been created solely
by employees of the U.S. Government; it is freely distributed with no
licensing requirements; and it is considered public domain. Therefore,
it is permissible to distribute this software as a free download from the
internet.

Disclaimer:
This software was developed to promote biometric standards and biometric
technology testing for the Federal Government in accordance with the USA
PATRIOT Act and the Enhanced Border Security and Visa Entry Reform Act.
Specific hardware and software products identified in this software were used
in order to perform the software development.  In no case does such
identification imply recommendation or endorsement by the National Institute
of Standards and Technology, nor does it imply that the products and equipment
identified are necessarily the best available for the purpose.
*******************************************************************************/
#include "nfrl_itl.h"

#include <iostream>

namespace NFRL_ITL {

/** Default constructor.  Not usable; supports compilation only. */
Registrator::Registrator() : _correspondingPoints(_correspondingPoints),
                             _metadata(_metadata) {}

/**
 * @brief Wrapper method.
 *
 * Note that the corresponding points and metadata variables are passed by
 * reference.  This supports the potential for a corresponding-points-selection
 * 'retry' capability.  These two vectors may be cleared prior to each call
 * of the performRegistration() function.
 * 
 * @param imgMoving IN 8-bit grayscale image to be registered with imgFixed
 * @param imgFixed IN 8-bit grayscale image to be registered-against
 *                 (by imgMoving)
 * @param correspondingPoints IN list of corresponding control points used
 *                            to perform the registration
 * @param metadata OUT reference to list of logging data generated by the
 *                 performRegistration() function
 * @throw NFRL::Miscue see NFRL-core NFRL::Registrator constructor
 */
Registrator::Registrator( cv::Mat &imgMoving,
                          cv::Mat &imgFixed,
                          std::vector<int> &correspondingPoints,
                          std::vector<std::string> &metadata )
  : _imgMovingMat(imgMoving), _imgFixedMat(imgFixed),
    _correspondingPoints(correspondingPoints), _metadata(metadata)
{
  std::vector<uint8_t> smallerImgData, largerImgData;

  std::vector<int> param(1);
  param[0] = cv::IMWRITE_PNG_STRATEGY_DEFAULT;
  try
  {
    cv::imencode(".png",
                  imgMoving, smallerImgData,
                  param);
    cv::imencode(".png",
                  imgFixed, largerImgData,
                  param);

    _r2.reset(new NFRL::Registrator( smallerImgData, largerImgData, _correspondingPoints, _metadata ));
  }
  catch( NFRL::Miscue &e )
  {
    throw e;
    // exit(0);
  }
}


/**
 * @brief Wrapper method.
 */
void Registrator::performRegistration()
{
  try
  {
    _r2->performRegistration();
  }
  catch( NFRL::Miscue &e )
  {
    throw e;
  }
}

/**
 * @brief Wrapper method.
 *
 * @param m OUT the metadata reference
 */
void Registrator::getMetadata( NFRL::Registrator::RegistrationMetadata &m )
{
  _r2->getMetadata( m );
}

/**
 * @brief Wrapper method.
 *
 * @param m OUT the metadata reference
 */
void Registrator::getXmlMetadata( XmlMetadata &m )
{
  _r2->getXmlMetadata( m );
}

/**
 * @brief Wrapper method to retrieve the padded, colorized, overlaid, registered
 *  image from memory.
 * 
 * @return encoded image
 */
cv::Mat Registrator::getColorOverlaidRegisteredImages()
{
  std::vector<uint8_t> vec = _r2->getColorOverlaidRegisteredImages();
  return cv::imdecode( cv::Mat(vec), cv::IMREAD_UNCHANGED );
}

/**
 * @brief Wrapper method to retrieve the cropped, fixed image from memory.
 * 
 * @return encoded image
 */
cv::Mat Registrator::getCroppedFixedImage()
{
  std::vector<uint8_t> vec = _r2->getCroppedFixedImage();
  return cv::imdecode( cv::Mat(vec), cv::IMREAD_UNCHANGED );
}

/**
 * @brief Wrapper method to retrieve the cropped, registered image
 *  from memory.
 *
 * @return encoded image type as type OpenCV cv::Mat
 */
cv::Mat Registrator::getCroppedRegisteredImage()
{
  std::vector<uint8_t> vec = _r2->getCroppedRegisteredImage();
  return cv::imdecode( cv::Mat(vec), cv::IMREAD_UNCHANGED );
}

/** @brief Wrapper method.
 *
 * @return number of pixels
 */
int Registrator::getFixedPadSizeLeft()
{
    return _r2->getPadDiffFixed().left;
}

/** @brief Wrapper method.
 *
 * @return number of pixels
 */
int Registrator::getFixedPadSizeTop()
{
    return _r2->getPadDiffFixed().top;
}

/** @brief Wrapper method.
 * 
 * @return number of pixels
 */
int Registrator::getMovingPadSizeLeft()
{
    return _r2->getPadDiffMoving().left;
}

/** @brief Wrapper method.
 * 
 * @return number of pixels
 */
int Registrator::getMovingPadSizeTop()
{
    return _r2->getPadDiffMoving().top;
}

/**
 * @brief Wrapper method.
 *
 * @return encoded image
 */
cv::Mat Registrator::getPngBlob()
{
  std::vector<uint8_t> vec = _r2->getPngBlob();
  return cv::imdecode( cv::Mat(vec), cv::IMREAD_UNCHANGED );
}

/**
 * @brief Wrapper method to retrieve the padded, grayscale Fixed image from memory.
 *
 * @return encoded image
 */
cv::Mat Registrator::getPaddedFixedImg()
{
  std::vector<uint8_t> vec = _r2->getPaddedFixedImg();
  return cv::imdecode( cv::Mat(vec), cv::IMREAD_UNCHANGED );
}

/**
 * @brief Wrapper method to retrieve the padded, registered, grayscale Moving
 * image from memory.
 * 
 * @return encoded image
 */
cv::Mat Registrator::getPaddedRegisteredMovingImg()
{
  std::vector<uint8_t> vec = _r2->getPaddedRegisteredMovingImg();
  return cv::imdecode( cv::Mat(vec), cv::IMREAD_UNCHANGED );
}

/**
 * @brief Wrapper method.
 */
void Registrator::saveCroppedRegisteredImageToDisk( std::string path )
{
  _r2->saveCroppedRegisteredImageToDisk( path );
}

/**
 * @brief Wrapper method.
 */
void Registrator::saveCroppedFixedImageToDisk( std::string path )
{
  _r2->saveCroppedFixedImageToDisk( path );
}


/**
 * Wrapper method.
 *
 * @return the current versions of this NFRL software and OpenCV
 */
std::string printVersion()
{
  return NFRL::printVersion();
}


}   // END namespace
